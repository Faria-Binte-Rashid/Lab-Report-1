import random

class Node:
    def __init__(self, a, b, z):
        self.x = a
        self.y = b
        self.depth = z

class DFS:
    def __init__(self):
        self.directions = 4  
        self.x_move = [1, -1, 0, 0]
        self.y_move = [0, 0, 1, -1]
        self.found = False
        self.N = 0
        self.source = None
        self.goal = None
        self.goal_level = float('inf')  
        self.visited = []  
        self.path = []  

    def init(self):
        self.N = random.randint(4, 7)  
        grid = self.generate_grid(self.N)

        
        source_x, source_y = self.find_valid_position(grid)
        goal_x, goal_y = self.find_valid_position(grid)

        while (source_x, source_y) == (goal_x, goal_y):  
            goal_x, goal_y = self.find_valid_position(grid)

        self.source = Node(source_x, source_y, 0)
        self.goal = Node(goal_x, goal_y, self.goal_level)

        print("\nGrid (Source: {} Goal: {}):".format((self.source.x, self.source.y), (self.goal.x, self.goal.y)))
        self.print_grid(grid)

        self.st_dfs(grid, self.source)

        if self.found:
            print("\nGoal found!")
            print("Number of moves required =", self.goal.depth)
            print("DFS Path:", self.path)
            print("Topological Order of Node Traversal:", self.visited)
        else:
            print("Goal cannot be reached from the starting block.")

    def generate_grid(self, N):
        
        grid = [[random.choice([0, 1]) for _ in range(N)] for _ in range(N)]
        return grid

    def find_valid_position(self, grid):
        
        while True:
            x = random.randint(0, self.N - 1)
            y = random.randint(0, self.N - 1)
            if grid[x][y] == 1:
                return x, y

    def print_grid(self, grid):
        for i in range(self.N):
            for j in range(self.N):
                if (i, j) == (self.source.x, self.source.y):
                    print("S", end=" ")  
                elif (i, j) == (self.goal.x, self.goal.y):
                    print("G", end=" ")  
                else:
                    print(grid[i][j], end=" ")
            print()

    def print_direction(self, m, x, y):
        directions = ['Down', 'Up', 'Right', 'Left']
        print(f"Moving {directions[m]} to ({x}, {y})")

    def st_dfs(self, graph, u):
        graph[u.x][u.y] = 0  
        self.visited.append((u.x, u.y))  

        if u.x == self.goal.x and u.y == self.goal.y:
            self.found = True
            self.goal.depth = u.depth
            self.path.append((u.x, u.y))
            return

        for j in range(self.directions):
            v_x = u.x + self.x_move[j]
            v_y = u.y + self.y_move[j]
            if (0 <= v_x < self.N) and (0 <= v_y < self.N) and graph[v_x][v_y] == 1:
                v_depth = u.depth + 1
                self.print_direction(j, v_x, v_y)
                self.path.append((u.x, u.y))  
                child = Node(v_x, v_y, v_depth)
                self.st_dfs(graph, child)

                if self.found:
                    return
                self.path.pop()  

def main():
    d = DFS()
    d.init()

if __name__ == "__main__":
    main()
